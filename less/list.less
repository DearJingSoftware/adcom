//
// Index
// --------------------------------------------------

.sort-control {
  &:hover { cursor: pointer; }
  &.sort-descending:after {
    content: "▼";
    font-size: 0.8em;
    padding-left: 4px;
  }
  &.sort-ascending:after {
    content: "▲";
    font-size: 0.8em;
    padding-left: 4px;
  }
}

// Container for individual items (not necessarily controls)
.list {
  .list-item {
    padding: 10px 6px 10px 0;
    margin: 0;
    position: relative;
    width: 100%;
    &:not(tr) { display: inline-block; }
  }

  a.list-item {
    text-decoration: none;
    display: block;
    color: #111;
  }
  a.list-item:hover {
    cursor: pointer;
  }
  .list-item-meta {
    font-size: 0.8em;
    color: #888;

    p { margin: 0; }
    strong { color: #777; }
  }
}

.list-bordered {
  .list-item {
    border-bottom: 1px solid @list-border-color;
  }
  .list-item:last-child {
    border-bottom: none;
  }
}

.list-compact {
  .list-item {
    padding: 0px 4px 0 0;
    margin: 0;
  }
}

.list-toggle {
  .list-item {
    padding: 0.4em 0.4em 0.4em 2em;
  }
  .list-item.active > :first-child::before {
    content: '';
    position: absolute;
    border-color: #009933;
    border-style: solid;
    border-width: 0 0.3em 0.25em 0;
    height: 1em;
    top: 1.5em;
    left: 0.8em;
    margin-top: -1em;
    transform: rotate(45deg);
    -webkit-transform: rotate(45deg);
    width: 0.5em;
  }
}

.list-hover {
  :not(tr).list-item,
  tr.list-item > td:first-child {
    // padding-left: @list-item-border-padding;
  }
  :not(tr).list-item:hover,
  tr.list-item:hover > td {
    background-color: darken(@item-default-bg, 5%);
  }
  :not(tr).list-item:hover,
  tr.list-item:hover > td:first-child {
    border-left-color: darken(@item-default-border, 5%);
  }
}

.list-state {
  &.list-hover {
    :not(tr).list-item,
    tr.list-item > td:first-child {
      padding-left: @list-item-border-padding;
      border-left-width: @list-item-border-width;
      border-left-style: solid;
      border-left-color: transparent;
    }

    :not(tr).list-item.default:hover,
    tr.list-item.default:hover > td:first-child {
      border-left-color: @item-default-border;
    }
  }

  .list-item {
    &.default,
    &.active,
    &.warning,
    &.info,
    &.danger,
    &.success {
      &:not(tr), & > td:first-child {
        padding-left: @list-item-border-padding;
        border-left-width: @list-item-border-width;
        border-left-style: solid;
        border-left-color: transparent;
      }
    }

    &.default {
      &:not(tr), & > td:first-child {
        border-left-color: transparent;
      }
    }
  }
}

.list-item-variant(@state; @border; @background) {
  .list-hover {
    :not(tr).list-item.@{state}:hover,
    tr.list-item.@{state}:hover > td {
      background-color: darken(@background, 5%);
    }
    :not(tr).list-item.@{state}:hover,
    tr.list-item.@{state}:hover > td:first-child {
      border-left-color: darken(@border, 5%);
    }
  }
  .list-state {
    :not(tr).list-item.@{state},
    tr.list-item.@{state} > td:first-child {
      border-left-color: @border;
    }
  }
  .list-state-bg {
    :not(tr).list-item.@{state},
    tr.list-item.@{state} > td:first-child {
      background-color: @background;
    }
  }
}

.list-item-variant(default, transparent, @item-default-bg);
.list-item-variant(active, @item-active-border, @item-active-bg);
.list-item-variant(info, @item-info-border, @item-info-bg);
.list-item-variant(danger, @item-danger-border, @item-danger-bg);
.list-item-variant(warning, @item-warning-border, @item-warning-bg);
.list-item-variant(success, @item-success-border, @item-success-bg);
